package chapter15.lambdademo;

/**
 * Класс демонстрирующий применение
 * лямбда выражений.
 *
 * @author Ломовской К.Ю.
 * @since 20.07.2019
 */
class LambdaDemo {

    public static void main(String[] args) {

        MyNumber myNum; // Объявить ссылку на функциональный интерфейс

        /*
            Здась лямбда-выражения просто является константным выражением.
            Когда оно рписваивается ссылочной переменной myNum, получается
            экземпляр класса, в котором лямбда-выражение реализует метод
            getValue() из функционального интерфейса MyNumber
         */
        myNum = () -> 123.45;

        // Вызвать метод getValue(), предоставляемый
        // присвоенным ранее лямбда-выражением
        System.out.println("Фиксированное значение: " + myNum.getValue());

        // А здесь используется более сложное выражение
        myNum = () -> Math.random() * 100;

        // В следующий строках используется лямбда выражение из предыдущей строки кода
        System.out.println("Случайное значение: " + myNum.getValue());
        System.out.println("Ещё одно случайное значение: " + myNum.getValue());

        /*
            Лямбда-выражение должно быть совместимо по типу данных с
            абстрактным методом, определяемым в функциональном интерфейсе.
            По этому следующая строка кода ошибочна:
         */
        //myNum = () -> "123.45"; // Ошибка!

    }
}
